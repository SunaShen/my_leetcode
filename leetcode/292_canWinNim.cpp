// @File   : 292_canWinNim.cpp
// @Source : https://leetcode-cn.com/problems/nim-game/
// @Title  : 292. Nim 游戏
// @Auther : sun_ds
// @Date   : 2020/4/11

/**  题目描述：
    你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。

    你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。

    示例:

    输入: 4
    输出: false
    解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
         因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/nim-game
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 *
 * 博弈问题
 * 必败态和必胜态的定义：
 * 必胜态：如果一个状态的后继状态中存在必败态，那么这种该状态下，先手必胜。        后继存在必败即必胜
 * 必败态：如果一个状态的所有后继状态都是必胜态，那么这种状态下，先手必败。        后继全是必胜即必败
 *
 * 使用dp
 * 每次和前面三个状态有关(每次拿1~3个)。即他的后继。
 * 若前面三个状态都为胜利，则当前状态为必败态。
 * 若前面三个状态存在失败，则当前状态为必胜态。。。因为可以通过本次拿石子(1~3的可控范围内)将状态转移到后手的必败态。那么后面就好办了。
 *
 *
 * 仔细分析发现，其实是4个一组。(3+1)。若总石子数能被4整除，则为必败态。否则都有机会将后手转移到必败态，从而使得自己为必胜态。
 * 所以考虑n%4的值。
 *
 *
 *
 */

//dp 超时
class Solution {
public:
    bool canWinNim(int n) {
        vector<bool> dp(n+1,false);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=3&&i-j>=0;j++){
                if(dp[i]==false){
                    dp[i] = !dp[i-j];
                }
            }
        }
        return dp[n];
    }
};

class Solution {
public:
    bool canWinNim(int n) {
        return n%4!=0;
    }
};

