// @File   : 309_maxProfit.cpp
// @Source : https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
// @Title  : 309. 最佳买卖股票时机含冷冻期
// @Auther : sun_ds
// @Date   : 2020/7/10

/**  题目描述：
    给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

    设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

    你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
    示例:

    输入: [1,2,3,0,2]
    输出: 3
    解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 *
 * 1.dp
 * dp[i]表示第 i 天结束时候的累积最大收益。
 * 由于限制了同时手里只能有一只股票，并且具有冷冻期。
 * 所以，相当于每一天都有三种状态。
 * 使用 dp[i][3] 表示。
 * dp[i][0] 手上持有股票的累积最大收益
 * dp[i][1] 手上不持有股票，并且处于冷冻期的累积最大收益
 * dp[i][2] 手上不持有股票，并且不处于冷冻期的累积最大收益
 *
 * 这里的「处于冷冻期」指的是在第 i 天结束之后的状态。也就是说：如果第 i 天结束之后处于冷冻期，那么第 i+1 天无法买入股票。
 *
 *
 * 当前的累积最大收益只与前一天有关(不能违反买入卖出规则)
 * 状态转移方程：
 * 1.1 dp[i][0]
 *  对于 dp[i][0], 目前持有的股票可以是在 i-1 天就已经有的，对应状态 dp[i-1][0];
 *  也可以是第 i 天买的，但这个前提是第 i-1 天没有处于冷冻期,对应状态 dp[i-1][2], 买入股票，利润 - price[i]
 *  dp[i][0] = max(dp[i-1][0], dp[i-1][2] - price[i]);
 * 1.2 dp[i][1]
 *  对于 dp[i][1], 在第 i 天结束后处于冷冻期的原因是第 i 天卖出了股票，
 *  前提是第 i-1 天必须持有股票，对应状态 dp[i-1][0],并且有卖出收益 price[i]
 *  dp[i][1] = dp[i-1][0] + price[i];
 * 1.3 dp[i][2]
 *  对于 dp[i][2], 在第 i 天结束后不持有股票且不处于冷冻期，说明第 i 天没有任何操作，即第 i-1 天就不持有股票。
 *  若 i-1 天处于冷冻期，对应状态 dp[i-1][1], 若 i-1 天不处于冷冻期，对应状态 dp[i-1][2]
 *  dp[i][j] = max(dp[i-1][1], dp[i-1][2]);
 *
 *
 * 最终结果为 max(dp[n-1][0], dp[n][1], dp[n][2])
 * 但是结束时手上还持有股票，利润肯定不是最大。
 * 因此，简化为 max(dp[n][1], dp[n][2])
 *
 *
 *
 * 初始值：
 * dp[0][0] = -price[0];  持有股票只能是当天买的。
 * dp[0][1] = 0; 不可能处于冷冻期，也置零。
 * dp[0][2] = 0; 不持有股票没有利润。
 *
 *
 * 时间复杂度 O(N)
 * 空间复杂度 O(N)
 *
 *
 * 可使用滚动数组优化空间复杂度到 O(1)
 *
 *
 */

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty()) {
            return 0;
        }

        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(3));
        dp[0][0] = -prices[0];
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            dp[i][1] = dp[i - 1][0] + prices[i];
            dp[i][2] = max(dp[i - 1][1], dp[i - 1][2]);
        }
        return max(dp[n - 1][1], dp[n - 1][2]);
    }
};

