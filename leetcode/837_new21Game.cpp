// @File   : 837_new21Game.cpp
// @Source : https://leetcode-cn.com/problems/new-21-game/
// @Title  : 837. 新21点
// @Auther : sun_ds
// @Date   : 2020/6/3

/**  题目描述：
    爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

    爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

    当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？

    示例 1：

    输入：N = 10, K = 1, W = 10
    输出：1.00000
    说明：爱丽丝得到一张卡，然后停止。
    示例 2：

    输入：N = 6, K = 1, W = 10
    输出：0.60000
    说明：爱丽丝得到一张卡，然后停止。
    在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
    示例 3：

    输入：N = 21, K = 17, W = 10
    输出：0.73278
    提示：

    0 <= K <= N <= 10000
    1 <= W <= 10000
    如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
    此问题的判断限制时间已经减少。

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/new-21-game
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


/**
 *
 * 1.dp
 * dp[x] 表示当前得分为 x 时的获胜概率。
 * 有题目可知，当 x >= K 时，不能再次抽牌，所以此时概率固定了。
 * 即 K <= x <= N 时概率为 1 ，x > N 时概率为 0.
 * 由已知推未知，后面概率已知，我们所要求的是 dp[0] ， 即从头开始他获胜的概率。
 * 转移方程：
 * dp[x] = 1 / w * ( dp[x+1] + dp[x+2] + ... + dp[x+W] );    x < K
 * 当 x < k 时，需要继续抽牌，而由于每次抽牌的范围为[1,W]，所以 dp[x] 的概率与后面 W 个概率有关，
 * 又由于各个抽到每一张牌的概率都是相等的，所以乘以 1 / w。
 *
 * 由于每次抽牌的范围为[1,W]，且 x >= k 就停止抽牌，所以牌面 x 的范围为 [0,k+w-1]
 * 定义 vector<int> dp(k+w) 足够。
 *
 * 根据状态转移方程从后往前计算。
 *
 * 比较 dp[x] = 1 / w * ( dp[x+1] + dp[x+2] + ... + dp[x+W] )
 *     dp[x-1] = 1 / w * ( dp[x] + dp[x+1] + ... + dp[x+W-1] )
 * 进一步优化 可得 dp[x-1] = dp[x] - (dp(x+W) - dp(x)) / w;
 *
 * 最后得到 dp[0] 即为所求结果。
 */

//dp
class Solution {
public:
    double new21Game(int N, int K, int W) {
        if (K == 0) {
            return 1.0;
        }
        vector<double> dp(K + W , 0);
        // K <= i <= N 获胜的概率为 1
        for (int i = K; i <= N && i < K + W; i++) {
            dp[i] = 1.0;
        }
        dp[K - 1] = 1.0 * min(N - K + 1, W) / W;
        for (int i = K - 2; i >= 0; i--) {
            // 借助前面 dp
            dp[i] = dp[i + 1] - (dp[i + W + 1] - dp[i + 1]) / W;
        }
        return dp[0];
    }
};


